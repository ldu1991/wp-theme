@use "sass:math";

@function _em($pixels, $context: 16) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    
    @return math.div($pixels, $context) * 1em;
}

@function _rem($pixels, $context: 16) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    
    @return math.div($pixels, $context) * 1rem;
}

@function _vw($target, $viewport: 1400) {
    @return math.div($target * 100, $viewport) * 1vw;
}

@function _aspect-ratio($one-value, $two-value, $new-value) {
    @return round(math.div($two-value, math.div($one-value, 100)) * math.div($new-value, 100));
}

@function _unit($size, $unit) {
    @if ($unit == 'rem') {
        @return _rem($size);
    } @else if ($unit == 'em') {
        @return _em($size);
    } @else if ($unit == 'px' or ($unit != 'rem' or $unit != 'em')) {
        @return #{$size}px;
    }
}

@function _clamp($min-size, $max-size, $min_viewport: 576, $max_viewport: 1400, $unit: 'rem') {
    $view_port_width_offset: _unit(math.div($min_viewport, 100), $unit);
    $size_difference: $max-size - $min-size;
    $viewport_difference: $max_viewport - $min_viewport;
    $linear_factor: math.div(math.round((100 * math.div($size_difference, $viewport_difference)) * 10000), 10000);
    
    $fluid_target_size: "#{_unit($min-size, $unit)} + ((1vw - #{$view_port_width_offset}) * #{$linear_factor})";
    
    $result: "";
    
    @if ($min-size == $max-size) {
        $result: _unit($min-size, $unit);
    } @else if ($min-size > $max-size) {
        $result: clamp(#{_unit($max-size, $unit)}, #{$fluid_target_size}, #{_unit($min-size, $unit)});
    } @else if ($min-size < $max-size) {
        $result: clamp(#{_unit($min-size, $unit)}, #{$fluid_target_size}, #{_unit($max-size, $unit)});
    }
    
    @return $result;
}

// Support for older browsers
@function _min-max($min-size, $max-size, $min_viewport: 576, $max_viewport: 1400, $unit: 'rem') {
    $view_port_width_offset: _unit(math.div($min_viewport, 100), $unit);
    $size_difference: $max-size - $min-size;
    $viewport_difference: $max_viewport - $min_viewport;
    $linear_factor: math.div(math.round((100 * math.div($size_difference, $viewport_difference)) * 10000), 10000);
    
    $fluid_target_size: "#{_unit($min-size, $unit)} + ((1vw - #{$view_port_width_offset}) * #{$linear_factor})";
    
    $result: "";
    
    @if ($min-size == $max-size) {
        $result: _unit($min-size, $unit);
    } @else if ($min-size > $max-size) {
        $result: min(max(#{_unit($max-size, $unit)}, #{$fluid_target_size}), #{_unit($min-size, $unit)});
    } @else if ($min-size < $max-size) {
        $result: min(max(#{_unit($min-size, $unit)}, #{$fluid_target_size}), #{_unit($max-size, $unit)});
    }
    
    @return $result;
}
