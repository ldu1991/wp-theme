@use "sass:math";

// Common variables
$browser-context: 16;
$minViewport: 576;
$maxViewport: 1400;

// font-size
@function em($pixels, $context: $browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    
    @return math.div($pixels, $context) * 1em;
}

@function rem($pixels, $context: $browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    
    @if (unitless($context)) {
        $context: $context * 1px;
    }
    
    @return math.div($pixels, $context) * 1rem;
}

@function vw($target) {
    @return math.div($target * 100, $maxViewport) * 1vw;
}

@function aspect-ratio($one-value, $two-value, $new-value) {
    @return round(math.div($two-value, math.div($one-value, 100)) * math.div($new-value, 100));
}

@function math-clamp($min-size, $max-size) {
    $view_port_width_offset: rem(math.div($minViewport, 100));
    $size_difference: $max-size - $min-size;
    $viewport_difference: $maxViewport - $minViewport;
    $linear_factor: math.div(math.round((100 * math.div($size_difference, $viewport_difference)) * 10000), 10000);
    
    $fluid_target_size: "#{rem($min-size)} + ((1vw - #{$view_port_width_offset}) * #{$linear_factor})";
    
    $result: "";
    
    @if ($min-size == $max-size) {
        $result: rem($min-size);
    } @else if ($min-size > $max-size) {
        $result: clamp(#{rem($max-size)}, #{$fluid_target_size}, #{rem($min-size)});
    } @else if ($min-size < $max-size) {
        $result: clamp(#{rem($min-size)}, #{$fluid_target_size}, #{rem($max-size)});
    }
    
    @return $result;
}
